I'm developing an 2d RPG, built from 16x16 tiles. As it stands, I've got simple terrain based generator, which centres the user, who can move around with either the keys or through pointing and clicking. I want to introduce some other characters into my game. I have the file at path (from root of the program) 'assets/town_rpg_pack/graphics/characters/characters.png', in this file there are 8 different sprites, each of which has 12 images structured in 4 (rows) x 3 (columns) manner, with four characters above the other four, resulting in a 8 (rows) x 12 (columns) tiled image. The sprites are constructed as follows: first row of each image is moving down (with middle image being stationary, the left image forming right leg (of sprite) forward and right image with left leg forward); second row is moving left (middle image is stationary, left image is right foot forward, left image is left foot forward); third is moving right (with middle image stationary, left image right foot forward, right image left foot forward); last is moving upwards (with middle image stationary, right image left foot forward, left image right foot forward). From left to right and top to bottom the sprites are: npc1, npc2, npc3, alien, slime, bat, ghost, spider.

Create classes and derivatives for each type - these should inherit from the Character class (as the player class has already done). The super classes should be NPC and Monster, with the first four sprites in NPC and last four in Monster. Then create derivative classes for each using the names defined). For the moment, populate the world with one of each npc, and multiples of monsters. The NPCs should remain stationary, whilst the monsters should move around a particular region. Structure all code generation in a coherent way, dividing and specifying new files/classes where necessary - it should conform to the current standards of the program, with abstraction created where fitting (for instance, each monster's random movements should be an inherited function from Monster class, but the speed at which these monsters move will be specific to the subclass). Below I have provided all the current classes that make the game function. For the implementation, provide any classes that have been created (specifying file they should go in - group monsters in one file for example), and any classes that have been altered IN FULL. Before providing this code - restate the requirements step by step to ensure that they are understood (this should be placed under a separate heading).

main.py

import pygame
from constants import SCREEN_WIDTH, SCREEN_HEIGHT, PLAYER_SPEED, PLAYER_SPRINT_SPEED, TILE_SIZE
from environment import Environment
from player import Player
from display import Display

def main():
    pygame.init()
    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
    pygame.display.set_caption("The Dispossessed")
    clock = pygame.time.Clock()

    environment = Environment(300, 300)
    player = Player(environment.width // 2 * TILE_SIZE, environment.height // 2 * TILE_SIZE, environment)
    display = Display(screen)

    game_state = "menu"

    running = True
    while running:
        dt = clock.tick(60) / 1000.0  # Get the time passed since last frame in seconds

        keys = pygame.key.get_pressed()
        if keys[pygame.K_SPACE]:
            player.is_sprinting = True
        else:
            player.is_sprinting = False

        if game_state == "playing":
            # Handle input and move player
            dx = (keys[pygame.K_RIGHT] - keys[pygame.K_LEFT]) * (
                PLAYER_SPRINT_SPEED if player.is_sprinting else PLAYER_SPEED) * dt
            dy = (keys[pygame.K_DOWN] - keys[pygame.K_UP]) * (
                PLAYER_SPRINT_SPEED if player.is_sprinting else PLAYER_SPEED) * dt

            if dx != 0 or dy != 0:
                player.path = []
                player.move(dx, dy, environment)

            player.update(dt, environment)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.MOUSEBUTTONDOWN and game_state == "menu":
                mouse_pos = pygame.mouse.get_pos()
                play_button_rect = pygame.Rect(SCREEN_WIDTH // 2 - 50, SCREEN_HEIGHT // 2 - 20, 100, 40)
                if play_button_rect.collidepoint(mouse_pos):
                    game_state = "playing"
            elif event.type == pygame.MOUSEBUTTONDOWN and game_state == "playing":
                mouse_pos = pygame.mouse.get_pos()
                target_x = player.x + (mouse_pos[0] - SCREEN_WIDTH // 2)
                target_y = player.y + (mouse_pos[1] - SCREEN_HEIGHT // 2)
                player.set_target(target_x, target_y, environment)

        if game_state == "menu":
            display.draw_menu()
        elif game_state == "playing":
            display.draw_environment(environment, player)

        pygame.display.flip()

    pygame.quit()

if __name__ == "__main__":
    main()

character.py


from abc import ABC, abstractmethod
import pygame

class Character(ABC):
    def __init__(self, x, y, sprite_sheet, sprite_width, sprite_height):
        self.x = x
        self.y = y
        self.sprite_sheet = sprite_sheet
        self.sprite_width = sprite_width
        self.sprite_height = sprite_height
        self.direction = 'down'
        self.animation_frame = 1  # Start with the middle frame
        self.animation_speed = 0.15
        self.animation_time = 0
        self.is_moving = False
        self.sprites = self.load_sprites()

    def load_sprites(self):
        sprites = {}
        for i, direction in enumerate(['left', 'up', 'down']):
            sprites[direction] = [
                self.sprite_sheet.subsurface((j * self.sprite_width, i * self.sprite_height, self.sprite_width, self.sprite_height))
                for j in range(3)
            ]
        return sprites

    @abstractmethod
    def move(self, dx, dy, environment):
        pass

    def update(self, dt):
        if self.is_moving:
            self.animation_time += dt
            if self.animation_time >= self.animation_speed:
                self.animation_frame = (self.animation_frame + 1) % 3
                self.animation_time = 0
        else:
            self.animation_frame = 1  # Set to middle frame when static
            self.animation_time = 0  # Reset animation time

    def get_current_sprite(self):
        return self.sprites[self.direction][self.animation_frame]

player.py


import pygame
import math
import time
import threading
from character import Character
from pathfinder import Pathfinder
from constants import PLAYER_SPEED, PLAYER_SPRINT_SPEED, TILE_SIZE, SCREEN_WIDTH, SCREEN_HEIGHT

class Player(Character):
    def __init__(self, x, y, environment):
        sprite_sheet = pygame.image.load('assets/town_rpg_pack/graphics/characters/hero.png').convert_alpha()
        super().__init__(x, y, sprite_sheet, 16, 16)
        self.prev_x = x
        self.prev_y = y
        self.direction = 'down'
        self.is_sprinting = False
        self.path = []
        self.pathfinder = Pathfinder(environment)
        self.target_x = None
        self.target_y = None
        self.pathfinding_timeout = 0.1  # 100 ms timeout for pathfinding
        self.pathfinding_thread = None
        self.cancel_flag = threading.Event()

    def move(self, dx, dy, environment):
        new_x = self.x + dx
        new_y = self.y + dy

        self.is_moving = dx != 0 or dy != 0

        if abs(dx) > abs(dy):
            if dx < 0:
                self.direction = 'left'
            else:
                self.direction = 'right'
        elif dy != 0:
            if dy < 0:
                self.direction = 'up'
            else:
                self.direction = 'down'

        if not environment.is_collision(new_x, new_y):
            self.prev_x = self.x
            self.prev_y = self.y
            self.x = new_x
            self.y = new_y

    def get_current_sprite(self):
        if self.direction == 'right':
            return pygame.transform.flip(self.sprites['left'][self.animation_frame], True, False)
        return self.sprites[self.direction][self.animation_frame]

    def update(self, dt, environment):
        super().update(dt)
        keys = pygame.key.get_pressed()
        if keys[pygame.K_SPACE]:
            self.is_sprinting = True
        else:
            self.is_sprinting = False

        if self.path:
            target = self.path[0]
            dx = target[0] - self.x
            dy = target[1] - self.y
            distance = math.sqrt(dx ** 2 + dy ** 2)

            if distance > 1:
                speed = PLAYER_SPRINT_SPEED if self.is_sprinting else PLAYER_SPEED
                move_distance = speed * dt

                if distance <= move_distance:
                    self.x, self.y = target
                    self.path.pop(0)
                else:
                    ratio = move_distance / distance
                    new_x = self.x + dx * ratio
                    new_y = self.y + dy * ratio
                    if not environment.is_collision(new_x, new_y):
                        self.move(dx * ratio, dy * ratio, environment)
                    else:
                        self.path = []
                self.is_moving = True
            else:
                self.path.pop(0)
        else:
            self.is_moving = False

    def set_target(self, target_x, target_y, environment):
        # Check if the target is in a collision area
        if environment.is_collision(target_x, target_y):
            print("Target is in an obstacle area")
            return

        self.target_x = target_x
        self.target_y = target_y

        # Cancel any ongoing pathfinding
        if self.pathfinding_thread and self.pathfinding_thread.is_alive():
            self.cancel_flag.set()
            self.pathfinding_thread.join()

        # Reset the cancel flag and start a new pathfinding thread
        self.cancel_flag.clear()
        self.pathfinding_thread = threading.Thread(target=self.find_path, args=(environment,))
        self.pathfinding_thread.start()

    def find_path(self, environment):
        start_time = time.time()
        try:
            path = self.pathfinder.find_path((self.x, self.y), (self.target_x, self.target_y))
            if path and not self.cancel_flag.is_set():
                self.path = path
            elif not self.cancel_flag.is_set():
                print("No path found")
        except Exception as e:
            if not self.cancel_flag.is_set():
                print(f"Pathfinding error: {e}")
        finally:
            elapsed_time = time.time() - start_time
            if elapsed_time > self.pathfinding_timeout and not self.cancel_flag.is_set():
                print(f"Pathfinding timed out after {elapsed_time:.2f} seconds")
                self.path = []

async_pathfinder.py

import threading
import queue
import time
from pathfinder import Pathfinder


class AsyncPathfinder:
    def __init__(self, environment, time_limit=0.5):
        self.environment = environment
        self.pathfinder = Pathfinder(environment)
        self.time_limit = time_limit
        self.request_queue = queue.Queue()
        self.result_queue = queue.Queue()
        self.thread = threading.Thread(target=self._process_requests, daemon=True)
        self.thread.start()

    def find_path(self, start, goal):
        self.request_queue.put((start, goal))

    def get_result(self):
        if not self.result_queue.empty():
            return self.result_queue.get()
        return None

    def _process_requests(self):
        while True:
            start, goal = self.request_queue.get()
            path = self._time_constrained_pathfinding(start, goal)
            self.result_queue.put(path)

    def _time_constrained_pathfinding(self, start, goal):
        start_time = time.time()
        path = None
        try:
            path = self.pathfinder.find_path(start, goal)
        except Exception as e:
            print(f"Pathfinding error: {e}")

        elapsed_time = time.time() - start_time
        if elapsed_time > self.time_limit:
            print(f"Pathfinding took too long: {elapsed_time:.2f} seconds")

        return path

pathfinder.py

import heapq
import math
from constants import TILE_SIZE

class Pathfinder:
    def __init__(self, environment):
        self.environment = environment

    def heuristic(self, a, b):
        return math.sqrt((b[0] - a[0])**2 + (b[1] - a[1])**2)

    def get_neighbors(self, x, y):
        neighbors = []
        for dx in [-1, 0, 1]:
            for dy in [-1, 0, 1]:
                if dx == 0 and dy == 0:
                    continue
                new_x, new_y = x + dx, y + dy
                if (0 <= new_x < self.environment.width and
                    0 <= new_y < self.environment.height and
                    not self.environment.is_collision(new_x * TILE_SIZE, new_y * TILE_SIZE)):
                    neighbors.append((new_x, new_y))
        return neighbors

    def find_path(self, start, goal):
        start = (int(start[0] // TILE_SIZE), int(start[1] // TILE_SIZE))
        goal = (int(goal[0] // TILE_SIZE), int(goal[1] // TILE_SIZE))

        frontier = []
        heapq.heappush(frontier, (0, start))
        came_from = {start: None}
        cost_so_far = {start: 0}

        while frontier:
            current = heapq.heappop(frontier)[1]

            if current == goal:
                break

            for next in self.get_neighbors(*current):
                new_cost = cost_so_far[current] + self.heuristic(current, next)
                if next not in cost_so_far or new_cost < cost_so_far[next]:
                    cost_so_far[next] = new_cost
                    priority = new_cost + self.heuristic(goal, next)
                    heapq.heappush(frontier, (priority, next))
                    came_from[next] = current

        if goal not in came_from:
            return None

        path = []
        current = goal
        while current != start:
            path.append(current)
            current = came_from[current]
        path.append(start)
        path.reverse()

        return [(x * TILE_SIZE + TILE_SIZE // 2, y * TILE_SIZE + TILE_SIZE // 2) for x, y in path]

environment.py

import pygame
import random
from constants import TILE_SIZE

class Environment:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.ground_tiles = [['' for _ in range(width)] for _ in range(height)]
        self.object_tiles = [['' for _ in range(width)] for _ in range(height)]
        self.map = [[0 for _ in range(width)] for _ in range(height)]
        self.load_tiles()
        self.generate_environment()

    def load_tiles(self):
        base_path = 'assets/town_rpg_pack/graphics/elements/basictiles_tiles/'
        self.tiles = {
            'ground': {
                'grass2': pygame.image.load(f'{base_path}grass2.png').convert_alpha(),
                'grass3': pygame.image.load(f'{base_path}grass3.png').convert_alpha(),
                'flowers': pygame.image.load(f'{base_path}flowers.png').convert_alpha(),
            },
            'object': {
                'tree1': pygame.image.load(f'{base_path}tree1.png').convert_alpha(),
                'tree2': pygame.image.load(f'{base_path}tree2.png').convert_alpha(),
                'plant': pygame.image.load(f'{base_path}plant.png').convert_alpha(),
            }
        }

    def generate_environment(self):
        # Initialize with basic grass
        for y in range(self.height):
            for x in range(self.width):
                self.ground_tiles[y][x] = 'grass2'
                self.object_tiles[y][x] = ''
                self.map[y][x] = 0

        # Generate biomes
        self.generate_forest_biomes()
        self.generate_flower_fields()

    def generate_forest_biomes(self):
        # Create forest seeds
        forest_seeds = []
        for _ in range(self.width * self.height // 400):
            forest_seeds.append((
                random.randint(5, self.width-5),
                random.randint(5, self.height-5)
            ))

        # Grow forests using cellular automata
        forest_cells = set()
        for seed in forest_seeds:
            forest_cells.add(seed)

        for _ in range(4):
            new_cells = set()
            for cell in forest_cells:
                x, y = cell
                for dx in [-1, 0, 1]:
                    for dy in [-1, 0, 1]:
                        new_x, new_y = x + dx, y + dy
                        if (0 < new_x < self.width-1 and
                            0 < new_y < self.height-1 and
                            random.random() < 0.45):
                            new_cells.add((new_x, new_y))
            forest_cells.update(new_cells)

        # Place trees in forest areas
        for (x, y) in forest_cells:
            if random.random() < 0.6:
                self.object_tiles[y][x] = random.choice(['tree1', 'tree2'])
                self.map[y][x] = 1
                for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]:
                    if (0 <= x+dx < self.width and
                        0 <= y+dy < self.height and
                        random.random() < 0.3 and
                        not self.object_tiles[y+dy][x+dx]):
                        self.object_tiles[y+dy][x+dx] = 'plant'
                        self.map[y+dy][x+dx] = 1

    def generate_flower_fields(self):
        field_seeds = []
        for _ in range(self.width * self.height // 500):
            field_seeds.append((
                random.randint(5, self.width-5),
                random.randint(5, self.height-5)
            ))

        flower_cells = set()
        for seed in field_seeds:
            flower_cells.add(seed)

        for _ in range(3):
            new_cells = set()
            for cell in flower_cells:
                x, y = cell
                for dx in [-1, 0, 1]:
                    for dy in [-1, 0, 1]:
                        new_x, new_y = x + dx, y + dy
                        if (0 < new_x < self.width-1 and
                            0 < new_y < self.height-1 and
                            random.random() < 0.55):
                            new_cells.add((new_x, new_y))
            flower_cells.update(new_cells)

        for (x, y) in flower_cells:
            if not self.object_tiles[y][x]:
                if random.random() < 0.7:
                    self.ground_tiles[y][x] = 'flowers'

    def is_collision(self, x, y):
        tile_x = int(x // TILE_SIZE)
        tile_y = int(y // TILE_SIZE)

        # First check if the position would be outside the map boundaries
        # Add TILE_SIZE-1 to check the full tile space the player occupies
        if (x < 0 or x + (TILE_SIZE - 1) >= self.width * TILE_SIZE or
                y < 0 or y + (TILE_SIZE - 1) >= self.height * TILE_SIZE):
            return True

        # Then check for collision with objects
        if 0 <= tile_x < self.width and 0 <= tile_y < self.height:
            return self.map[tile_y][tile_x] == 1

        return True

    def get_walkable_neighbors(self, x, y):
        neighbors = []
        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:  # 4-directional movement
            new_x, new_y = x + dx, y + dy
            if (0 <= new_x < self.width and 0 <= new_y < self.height and
                    not self.is_collision(new_x * TILE_SIZE, new_y * TILE_SIZE)):
                neighbors.append((new_x, new_y))
        return neighbors
display.py


import pygame
from constants import SCREEN_WIDTH, SCREEN_HEIGHT, TILE_SIZE, BLACK, WHITE

class Display:
    def __init__(self, screen):
        self.screen = screen
        self.font = pygame.font.Font(None, 36)

    def draw_environment(self, environment, player):
        self.screen.fill(BLACK)

        visible_tiles_x = SCREEN_WIDTH // TILE_SIZE
        visible_tiles_y = SCREEN_HEIGHT // TILE_SIZE

        # Add buffer tiles for smoother scrolling (1 tile extra on each side)
        buffer_tiles = 2  # Adjustable buffer size

        # Calculate player's centered position in tile coordinates
        player_tile_x = player.x // TILE_SIZE
        player_tile_y = player.y // TILE_SIZE

        # Calculate the visible range around the player (with buffer)
        half_width = (visible_tiles_x // 2) + buffer_tiles
        half_height = (visible_tiles_y // 2) + buffer_tiles

        # Calculate the range of tiles to draw
        start_x = int(player_tile_x - half_width)
        end_x = int(player_tile_x + half_width + 1)
        start_y = int(player_tile_y - half_height)
        end_y = int(player_tile_y + half_height + 1)

        # Calculate offset for centering the view
        offset_x = -(player.x % TILE_SIZE)
        offset_y = -(player.y % TILE_SIZE)

        # Calculate base screen position (adjusted for buffer)
        base_screen_x = (SCREEN_WIDTH - visible_tiles_x * TILE_SIZE) // 2 - (buffer_tiles * TILE_SIZE)
        base_screen_y = (SCREEN_HEIGHT - visible_tiles_y * TILE_SIZE) // 2 - (buffer_tiles * TILE_SIZE)

        # Draw ground layer first
        for y in range(start_y, end_y):
            for x in range(start_x, end_x):
                # Calculate screen position with buffer offset
                screen_x = (x - start_x) * TILE_SIZE + offset_x + base_screen_x
                screen_y = (y - start_y) * TILE_SIZE + offset_y + base_screen_y

                # Only draw if the tile is within the environment bounds
                if 0 <= x < environment.width and 0 <= y < environment.height:
                    ground_type = environment.ground_tiles[y][x]
                    if ground_type:
                        self.screen.blit(environment.tiles['ground'][ground_type], (screen_x, screen_y))

        # Draw object layer
        for y in range(start_y, end_y):
            for x in range(start_x, end_x):
                screen_x = (x - start_x) * TILE_SIZE + offset_x + base_screen_x
                screen_y = (y - start_y) * TILE_SIZE + offset_y + base_screen_y

                if 0 <= x < environment.width and 0 <= y < environment.height:
                    object_type = environment.object_tiles[y][x]
                    if object_type:
                        self.screen.blit(environment.tiles['object'][object_type], (screen_x, screen_y))

        # Draw player in center of screen
        player_screen_x = SCREEN_WIDTH // 2
        player_screen_y = SCREEN_HEIGHT // 2
        self.screen.blit(player.get_current_sprite(),
                         (player_screen_x - player.sprite_width // 2,
                          player_screen_y - player.sprite_height // 2))

    def draw_menu(self):
        self.screen.fill(BLACK)
        title = self.font.render("The Dispossessed", True, WHITE)
        play_button = self.font.render("Play", True, WHITE)

        self.screen.blit(title, (SCREEN_WIDTH // 2 - title.get_width() // 2, SCREEN_HEIGHT // 3))
        self.screen.blit(play_button, (SCREEN_WIDTH // 2 - play_button.get_width() // 2, SCREEN_HEIGHT // 2))

constants.py


# Constants
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
TILE_SIZE = 16
PLAYER_SPEED = 150  # pixels per second
PLAYER_SPRINT_SPEED = 450  # sprint speed boost

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
